#!/usr/bin/perl -w
# Lookup 27-day solar forecast, output as graph.  2-clause BSD license.

# Copyright 2018 /u/molo1134. All rights reserved.

use strict;
use utf8;
use feature 'unicode_strings';
use Switch;
use POSIX qw(strftime);
use DateTime::Format::Strptime;
binmode(STDOUT, ":utf8");

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;

my $url="http://services.swpc.noaa.gov/text/27-day-outlook.txt";

my $datestamp;
my ($firstday, $lastday);

my @kp;
my @ap;
my @sfi;

my $dtparser = DateTime::Format::Strptime->new(
  #see strftime
  pattern => '%Y %m %d',
  time_zone => 'UTC',
  on_error => 'undef');

open (HTTP, '-|', "curl -s $url");
binmode(HTTP, ":utf8");
while (<HTTP>) {
  chomp;

  if (/^:Issued: (.*)$/) {
    $datestamp = $1;
    #print "date: $datestamp\n";
  }

  next if /^[:#]/;
  next if /^\s*$/;

  my $dt;

  if (/^(\d{4})\s+(\w{3})\s+(\d{2})\s+(\d+)\s+(\d+)\s+(\d+)/) {
    $firstday = $1 if !defined($firstday);
    $lastday = "$1 $2 $3";

    # skip if forecast is for a day earlier than today
    $dt = $dtparser->parse_datetime("$1 " . monthNameToNum($2) . " $3");
    my $ts = $dt->epoch() if defined $dt;
    my $now = time();
    next if ($ts < ($now - 24*60*60));

    push @sfi, $4;
    push @ap, $5;
    push @kp, $6;

    #my ($sfi, $ap, $kp) = ($4, $5, $6);
    #print "$lastday $ts $sfi $ap $kp\n";

  }
}
close HTTP;

print "Daily forecast as of: $datestamp; today to $lastday:\n";
printf "Kp : %s\n", join("", kIndexToColorBlocks(@kp));
printf "Ap : %s\n", join("", aIndexToColorBlocks(@ap));
printf "SFI: %s\n", join("", sfiToColorBlocks(@sfi));

# TODO: determine field day start programmatically
my $fdIndicator = indicateEvent($lastday, "ARRL Field Day", "2018 6 23", 2);
printf "     %s\n", $fdIndicator if defined $fdIndicator;

sub kIndexToBlocks {
  map { tr/0123456789/ ▁▂▃▄▅▆▇█↑/ } @_;
  return @_;
}
#   colors from: http://www.swpc.noaa.gov/products/station-k-and-indices
# Kindex < 4: green
# Kindex = 5: yellow
# Kindex 6-7: red
# Kindex > 7: light blue
sub kIndexToColorBlocks {
  map {
    tr/0123456789/ ▁▂▃▄▅▆▇█↑/;
    $_ = green($_)	if /[▁▂▃]/;
    $_ = yellow($_)	if /▄/;
    $_ = red($_)	if /[▅▆]/;
    $_ = lightblue($_)	if /[▇█↑]/;
  } @_;
  return @_;
}
#   colors from: http://www.swpc.noaa.gov/products/station-k-and-indices
# Aindex  < 20: green
# Aindex 20-29: yellow
# Aindex 30-49: red
# Aindex 50-99: dark red
# Aindex > 100: light blue
sub aIndexToColorBlocks {
  map {
    $_ = int($_ / 10) + 1;
    $_ = 9 if $_ > 9;
    tr/0123456789/ ▁▂▃▄▅▆▇█↑/;
    $_ = green($_)	if /[▁▂]/;
    $_ = yellow($_)	if /[▃]/;
    $_ = red($_)	if /[▄▅]/;
    $_ = darkRed($_)	if /[▆▇█]/;
    $_ = lightblue($_)	if /[↑]/;
  } @_;
  return @_;
}

# SFI   < 80: dark red
# SFI  81-94: red
# SFI 95-119: yellow
# SFI  > 120: green
sub sfiToColorBlocks {
  map {
    if ($_ < 81) {
      $_ = darkRed("▁");
    } elsif ($_ < 88) {
      $_ = red("▂");
    } elsif ($_ < 95) {
      $_ = red("▃");
    } elsif ($_ < 103) {
      $_ = yellow("▄");
    } elsif ($_ < 111) {
      $_ = yellow("▅");
    } elsif ($_ < 120) {
      $_ = yellow("▆");
    } elsif ($_ < 130) {
      $_ = green("▇");
    } elsif ($_ < 140) {
      $_ = green("█");
    } else {
      $_ = green("↑");
    }
  } @_;
  return @_;
}

sub monthNameToNum {
  my $monthabbr = shift;
  switch ($monthabbr) {
    case "Jan" { return 1 }
    case "Feb" { return 2 }
    case "Mar" { return 3 }
    case "Apr" { return 4 }
    case "May" { return 5 }
    case "Jun" { return 6 }
    case "Jul" { return 7 }
    case "Aug" { return 8 }
    case "Sep" { return 9 }
    case "Oct" { return 10 }
    case "Nov" { return 11 }
    case "Dec" { return 12 }
    else       { die "unknown month: $monthabbr" }
  }
}

sub indicateEvent {
  my $lastDay = shift;
  my $name = shift;
  my $eventDate = shift;
  my $duration = shift;

  my $now = time();

  my ($y, $m, $d) = split(/ /, $lastDay);
  my $end = $dtparser->parse_datetime("$y " . monthNameToNum($m) . " $d");

  my $fdStart = $dtparser->parse_datetime($eventDate);

  my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime($now);
  $year += 1900; $mon += 1;
  #print "now: $year $mon $mday\n";

  my $todayStart = $dtparser->parse_datetime("$year $mon $mday");

  if ($todayStart->epoch() < $fdStart->epoch() and
      $fdStart->epoch() < $end->epoch()) {

    #print "have fd\n";
    #print "$now, $lastDay, $fdStart, $end\n";

    my $result = "";

    my $cursor = $todayStart->epoch();
    while ($cursor < $fdStart->epoch()) {
      $result .= " ";
      $cursor += 24*60*60;
    }
    my $i = 0;
    while ($i < $duration) {
      $result .= "^";
      $i++;
    }
    $result .= " $name";
    return $result;
  }

  return undef;
}
