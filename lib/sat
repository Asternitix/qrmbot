#!/usr/bin/perl -w
# Calculate satellite passes.  2-clause BSD license.

# Copyright 2018 /u/molo1134. All rights reserved.

use strict;
use utf8;
use feature 'unicode_strings';
use Astro::Coord::ECI;
use Astro::Coord::ECI::TLE;
use Astro::Coord::ECI::TLE::Set;
#use Astro::Coord::ECI::Utils qw{deg2rad rad2deg};
use URI::Escape;
use Math::Round;
use Math::Trig;
use POSIX qw(floor strftime);
binmode(STDOUT, ":utf8");

my $tleurl="http://www.amsat.org/amsat/ftp/keps/current/nasabare.txt";

# potential changes:
# 1) parameter for number of passes / length of time?
# 2) parameter for minimum elevation (default 5 deg)?

my %aliases = (
  # lowercase key
  "ao-7" => "AO-07",
  "ariss" => "ISS",
  "dauriadx1" => "DAURIA DX 1",
  "dauria-dx-1" => "DAURIA DX 1",
  "fu3" => "FIREBIRD FU3",
  "firebirdfu3" => "FIREBIRD FU3",
  "firebird-fu3" => "FIREBIRD FU3",
  "fu4" => "FIREBIRD FU4",
  "firebirdfu4" => "FIREBIRD FU4",
  "firebird-fu4" => "FIREBIRD FU4",
  "estar-2" => "e-st\@r-II",
  "estar2" => "e-st\@r-II",
  "estar-ii" => "e-st\@r-II",
  "e-star-ii" => "e-st\@r-II",
  "nodes1" => "NODES 1",
  "nodes-1" => "NODES 1",
  "nodes2" => "NODES 2",
  "nodes-2" => "NODES 2",
  "lapan-a3" => "Lapan A3",
  "alsat-1n" => "AlSat 1N",
  "alsat1n" => "AlSat 1N",
  "tancredo1" => "Tancredo 1",
  "tancredo-1" => "Tancredo 1",
);

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

# change this to 0 to always exit with success
my $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq 'eggdrop';


my $highlight="vt220";
$highlight = "none" if ! -t STDOUT;
$highlight = "irc" if $username eq "eggdrop";

if ($#ARGV < 0 || length($ARGV[0]) == 0) {
  #print "usage: $0 <sat> <grid>|<qth> [<elev>ft|<elev>m]\n";
  print "usage: $0 <sat> <qth>|<grid>\n" if $username ne "eggdrop";
  print "usage: !sat <sat> <qth>|<grid>\n" if $username eq "eggdrop";
  exit $exitnonzeroonerror;
}

# eggdrop doesn't split args on spaces
@ARGV=split(' ', join(' ',@ARGV));

my $query = "";
my $sat = undef;
my $elev_m = "0";
my $i = 0;
while ($i <= $#ARGV) {
  if ( $ARGV[$i] =~ /^([0-9]+)(ft|m)/ ) {
    if ($2 eq "m") {
      $elev_m = $1;
    } elsif ($2 eq "ft") {
      $elev_m = $1 * 0.3048;  # feet to meters
    }
  } elsif (!defined($sat)) {
    $sat = $ARGV[$i];
  } else {
    $query .= " " unless $i == 1;
    $query .= $ARGV[$i];
  }
  $i++;
}
if ($query =~ /^(.+)\s+[0-9.-]+,[0-9.-]+/) {
  $query = $1;
}
#print "query: $query\n";
#print "$elev_m\n";

if (length($query) == 0 && $sat ne "list") {
  print "usage: $0 <sat> <qth>|<grid>\n" if $username ne "eggdrop";
  print "usage: !sat <sat> <qth>|<grid>\n" if $username eq "eggdrop";
  exit $exitnonzeroonerror;
}

my ($lat, $lon) = (0, 0);

($lat, $lon) = split(',', argToCoords($query)) unless $query eq '';
#print ("$lat, $lon\n");

my $now = time();

my $sta = Astro::Coord::ECI->universal($now)->
  geodetic(deg2rad($lat), deg2rad($lon), $elev_m / 1000);  #kilometers
$sta->set(refraction => 0);
$sta->universal($now);

my @data;
open(TLE, '-|', "curl --max-time 5 -s $tleurl");
while (<TLE>) {
  push (@data, $_);
}
close(TLE);

#my $seen = 0;
#open(TLE, '-|', "curl -s http://www.amsat.org/amsat/ftp/keps/current/nasa.all");
#while (<TLE>) {
#  if (/TO ALL RADIO AMATEURS/) {
#    $seen = 1;
#    next;
#  }
#  if (/^\s*$/) {
#    next;
#  }
#  if (/^\/EX/) {
#    next;
#  }
#  push (@data, $_) if $seen == 1;
#}
#close(TLE);

#print("records: $#data\n");
my @elements = Astro::Coord::ECI::TLE::Set->aggregate(
		  Astro::Coord::ECI::TLE->parse(@data));
#print("records: $#data\n");

# only passes for the next 24h
my $finish = $now + (1 * 86400);

my $found = 0;

if (defined($aliases{$sat})) {
  $sat = $aliases{lc($sat)};
}

my @passes;
my @sats;
foreach my $tle (@elements) {
  my $name = $tle->get('name');
  $name =~ s/ /-/g;
  push(@sats, $name);
  if (lc($name) eq lc($sat)) {
    #print "$name\n";
    $tle->validate($now, $finish) or next;
    $found = 1;
    #print $tle->tle_verbose(), "\n";
    #print $name = $tle->get('tle'), "\n";
    #print "doing passes..\n";
    $tle->set('pass_threshold', deg2rad(5)); # minimum peak elevation
    $tle->set('visible', 0);
    $tle->set('horizon', 0);
    push(@passes, $tle->pass($sta, $now, $finish));
  }
}

if (lc($sat) eq "list") {
  print join(" ", @sats), "\n";
  exit 0;
}

if ($found == 0) {
  print "satellite not found: $sat\n";
  exit $exitnonzeroonerror;
}

#print("passes: $#passes\n");

#print "      Date/Time          Satellite        Elevation  Azimuth Event\n";

if ($#passes < 0) {
  print "$sat: no passes found within 24h\n";
  exit $exitnonzeroonerror;
}

my $numpasses = 3;

foreach my $pass (sort {$a->{time} <=> $b->{time}} @passes) {
  #print "\n";
  foreach my $event (@{$pass->{events}}) {

    if ($event->{event} eq "rise") {
      print(bold($event->{body}->get('name')),
	    " @",
	    coordToGrid($lat, $lon),
	    ": ")
	if $numpasses == 3;
      print "\n  " if $username ne "eggdrop";
      print green("AOS"),
	    strftime(" %Y-%m-%d ", gmtime($event->{time})),
	    bold(strftime("%H:%Mz", gmtime($event->{time}))),
	    " az ",
	    sprintf("%d", rad2deg($event->{azimuth})),
	    "°; ";
    }

    if ($event->{event} eq "max") {
      print "max el ", bold(sprintf("%d°", rad2deg($event->{elevation})));
      printf(" az %d°; ", rad2deg($event->{azimuth}));
    }

    if ($event->{event} eq "set") {
      print red("LOS");
      printf(" %s az %d°",
	bold(strftime("%H:%Mz", gmtime($event->{time}))),
	rad2deg($event->{azimuth}));

      --$numpasses;
      print "\n" if $numpasses == 0;
      print " ‖ " if $numpasses > 0 && $username eq "eggdrop";
      exit 0 if $numpasses == 0;
    }

    # not reached
    #printf("%s %-15s %9.1f %9.1f %-5s\n",
    #  scalar gmtime($event->{time}),
    #  $event->{body}->get('name'),
    #  rad2deg($event->{elevation}),
    #  rad2deg($event->{azimuth}),
    #  $event->{event}) if 0;
    #
    #if ($event->{event} eq "set") {
    #  exit 0;
    #}
  }
}




sub argToCoords {
  my $arg = shift;
  my $type;

  if ($arg =~ /^(grid:)? ?([A-R]{2}[0-9]{2}([a-x]{2})?)/i) {
    $arg = $2;
    $type = "grid";
  } elsif ($arg =~ /^(geo:)? ?([-+]?\d+(.\d+)?,\s?[-+]?\d+(.\d+)?)/i) {
    $arg = $2;
    $type = "geo";
  } else {
    $type = "qth";
  }

  my $lat = undef;
  my $lon = undef;
  my $grid = undef;

  if ($type eq "grid") {
    $grid = $arg;
  } elsif ($type eq "geo") {
    ($lat, $lon) = split(',', $arg);
  } elsif ($type eq "qth") {
    my $ret = qthToCoords($arg);
    if (!defined($ret)) {
      print "'$arg' not found.\n";
      exit $exitnonzeroonerror;
    }
    ($lat, $lon) = split(',', $ret);
  }

  if (defined($grid)) {
    ($lat, $lon) = split(',', gridToCoord(uc($grid)));
  }

  return join(',', $lat, $lon);
}

sub qthToCoords {
  my $place = uri_escape_utf8(shift);
  my $lat = undef;
  my $lon = undef;
  my $url = "http://maps.googleapis.com/maps/api/geocode/xml?address=$place&sensor=false";

  open (HTTP, '-|', "curl -s '$url'");
  binmode(HTTP, ":utf8");
  GET: while (<HTTP>) {
    #print;
    chomp;
    if (/<lat>([+-]?\d+.\d+)<\/lat>/) {
      $lat = $1;
    }
    if (/<lng>([+-]?\d+.\d+)<\/lng>/) {
      $lon = $1;
    }
    if (defined($lat) and defined($lon)) {
      last GET;
    }
  }
  close HTTP;

  if (defined($lat) and defined($lon)) {
    return "$lat,$lon";
  } else {
    return undef;
  }
}

sub gridToCoord {
  my $gridstr = shift;

  if (not $gridstr =~ /^[A-R]{2}[0-9]{2}([A-X]{2})?/i ) {
    print "\ninvalid grid\n";
    return undef;
  }

  my @grid = split (//, uc($gridstr));

  if ($#grid < 3) {
    return undef;
  }

  my $lat;
  my $lon;
  my $formatter;

  $lon = ((ord($grid[0]) - ord('A')) * 20) - 180;
  $lat = ((ord($grid[1]) - ord('A')) * 10) - 90;
  $lon += ((ord($grid[2]) - ord('0')) * 2);
  $lat += ((ord($grid[3]) - ord('0')) * 1);

  if ($#grid >= 5) {
    $lon += ((ord($grid[4])) - ord('A')) * (5/60);
    $lat += ((ord($grid[5])) - ord('A')) * (5/120);
    # move to center of subsquare
    $lon += (5/120);
    $lat += (5/240);
    # not too precise
    $formatter = "%.4f";
  } else {
    # move to center of square
    $lon += 1;
    $lat += 0.5;
    # even less precise
    $formatter = "%.1f";
  }

  # not too precise
  $lat = sprintf($formatter, $lat);
  $lon = sprintf($formatter, $lon);

  return join(',', $lat, $lon);
}

sub coordToGrid {
  my $lat = shift;
  my $lon = shift;
  my $grid = "";

  $lon = $lon + 180;
  $lat = $lat + 90;

  $grid .= chr(ord('A') + int($lon / 20));
  $grid .= chr(ord('A') + int($lat / 10));
  $grid .= chr(ord('0') + int(($lon % 20)/2));
  $grid .= chr(ord('0') + int(($lat % 10)/1));
  $grid .= chr(ord('a') + int(($lon - (int($lon/2)*2)) / (5/60)));
  $grid .= chr(ord('a') + int(($lat - (int($lat/1)*1)) / (2.5/60)));

  return $grid;
}


sub bold {
  my $s = shift;
  if ($highlight eq "irc") {
    return "\x02$s\x02"
  } elsif ($highlight eq "vt220") {
    return "\e[1m$s\e[0m"
  } else {
    return $s;
  }
}
sub darkRed {
  my $s = shift;
  if ($highlight eq "irc") {
    return "\x035\x02\x02$s\x03"
  } elsif ($highlight eq "vt220") {
    return "\e[31m$s\e[0m"
  } else {
    return $s;
  }
}
sub red {
  my $s = shift;
  if ($highlight eq "irc") {
    return "\x034\x02\x02$s\x03"
  } elsif ($highlight eq "vt220") {
    return "\e[1;31m$s\e[0m"
  } else {
    return $s;
  }
}
sub yellow {
  my $s = shift;
  if ($highlight eq "irc") {
    return "\x038\x02\x02$s\x03"
  } elsif ($highlight eq "vt220") {
    return "\e[1;33m$s\e[0m"
  } else {
    return $s;
  }
}
sub green {
  my $s = shift;
  if ($highlight eq "irc") {
    return "\x033\x02\x02$s\x03"
  } elsif ($highlight eq "vt220") {
    return "\e[32m$s\e[0m"
  } else {
    return $s;
  }
}
sub lightblue {
  my $s = shift;
  if ($highlight eq "irc") {
    return "\x0312\x02\x02$s\x03"
  } elsif ($highlight eq "vt220") {
    return "\e[1;34m$s\e[0m"
  } else {
    return $s;
  }
}
